"""
Skrypt do inicjalizacji podobie≈Ñstw ksiƒÖ≈ºek
backend/init_similarities.py
"""

import os
import sys
import django
import time
from django.db import transaction, models

# Setup Django 
sys.path.append('/app')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from ml_api.models import Book, BookSimilarity, BookVector
from ml_api.services.similarity_service import BookSimilarityService

def check_prerequisites():
    """Sprawd≈∫ czy system jest gotowy"""
    print("üîç Checking prerequisites...")
    
    # Sprawd≈∫ liczbƒô ksiƒÖ≈ºek
    book_count = Book.objects.count()
    print(f"üìö Books in database: {book_count}")
    
    if book_count == 0:
        print("‚ùå No books found! Please import books first.")
        return False
    
    if book_count < 10:
        print("‚ö†Ô∏è  Very few books - similarities might not be meaningful")
    
    # Sprawd≈∫ czy sƒÖ ju≈º podobie≈Ñstwa
    similarity_count = BookSimilarity.objects.count()
    print(f"üîó Existing similarities: {similarity_count}")
    
    if similarity_count > 0:
        response = input("‚ùì Similarities already exist. Recalculate? (y/N): ")
        if response.lower() != 'y':
            print("‚úÖ Keeping existing similarities")
            return False
    
    return True

def calculate_sample_similarities(sample_size=50):
    """Wylicz podobie≈Ñstwa dla pr√≥bki ksiƒÖ≈ºek"""
    print(f"üß™ Calculating similarities for {sample_size} sample books...")
    
    service = BookSimilarityService()
    
    # We≈∫ najbardziej popularne ksiƒÖ≈ºki (z recenzjami)
    sample_books = Book.objects.annotate(
        review_count=models.Count('reviews')
    ).order_by('-review_count', '-created_at')[:sample_size]
    
    print(f"üìä Selected {len(sample_books)} books for similarity calculation")
    
    total_similarities = 0
    processed = 0
    
    start_time = time.time()
    
    for book in sample_books:
        try:
            print(f"[{processed + 1}/{len(sample_books)}] Processing: {book.title[:50]}")
            
            similarities_count = service.calculate_similarities_for_book(book, batch_size=20)
            total_similarities += similarities_count
            processed += 1
            
            # Progress indicator
            if processed % 10 == 0:
                elapsed = time.time() - start_time
                avg_time = elapsed / processed
                remaining_time = avg_time * (len(sample_books) - processed)
                print(f"   üìà Progress: {processed}/{len(sample_books)} books | ETA: {remaining_time/60:.1f} min")
            
        except Exception as e:
            print(f"   ‚ùå Error processing {book.title}: {e}")
            continue
    
    elapsed_time = time.time() - start_time
    
    print(f"\n‚úÖ Sample calculation completed!")
    print(f"üìä Books processed: {processed}/{len(sample_books)}")
    print(f"üîó Total similarities created: {total_similarities}")
    print(f"‚è±Ô∏è  Time taken: {elapsed_time/60:.2f} minutes")
    print(f"üìà Average similarities per book: {total_similarities/processed if processed > 0 else 0:.1f}")
    
    return total_similarities

def calculate_all_similarities():
    """Wylicz podobie≈Ñstwa dla wszystkich ksiƒÖ≈ºek"""
    print("üöÄ Starting FULL similarity calculation...")
    print("‚ö†Ô∏è  This will take a LONG time for large datasets!")
    
    response = input("‚ùì Are you sure you want to calculate similarities for ALL books? (y/N): ")
    if response.lower() != 'y':
        print("‚ùå Cancelled")
        return 0
    
    service = BookSimilarityService()
    return service.calculate_all_similarities()

def show_similarity_examples():
    """Poka≈º przyk≈Çady wyliczonych podobie≈Ñstw"""
    print("\nüìã SIMILARITY EXAMPLES")
    print("=" * 60)
    
    # Top 10 najwy≈ºszych podobie≈Ñstw
    top_similarities = BookSimilarity.objects.order_by('-cosine_similarity')[:10]
    
    if not top_similarities:
        print("‚ùå No similarities calculated yet")
        return
    
    print("üèÜ TOP 10 HIGHEST SIMILARITIES:")
    for i, sim in enumerate(top_similarities, 1):
        print(f"   {i:2d}. {sim.book1.title[:30]:30} ‚Üî {sim.book2.title[:30]:30}")
        print(f"       Similarity: {sim.cosine_similarity:.4f}")
        print(f"       Categories: {sim.category_similarity:.3f} | "
              f"Keywords: {sim.keyword_similarity:.3f} | "
              f"Authors: {sim.author_similarity:.3f}")
        print()
    
    # Przyk≈Çad rekomendacji dla losowej ksiƒÖ≈ºki
    random_book = Book.objects.filter(
        similarities_as_book1__isnull=False
    ).first()
    
    if random_book:
        print(f"üìö RECOMMENDATIONS FOR: {random_book.title}")
        service = BookSimilarityService()
        recommendations = service.get_similar_books(random_book, limit=5)
        
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec['book'].title} (similarity: {rec['similarity']:.3f})")

def analyze_similarity_quality():
    """Analizuj jako≈õƒá wyliczonych podobie≈Ñstw"""
    print("\nüî¨ SIMILARITY QUALITY ANALYSIS")
    print("=" * 60)
    
    from django.db.models import Avg, Max, Min, Count
    
    # Podstawowe statystyki
    stats = BookSimilarity.objects.aggregate(
        count=Count('id'),
        avg_similarity=Avg('cosine_similarity'),
        max_similarity=Max('cosine_similarity'),
        min_similarity=Min('cosine_similarity'),
        avg_category=Avg('category_similarity'),
        avg_keyword=Avg('keyword_similarity'),
        avg_author=Avg('author_similarity'),
        avg_description=Avg('description_similarity')
    )
    
    print(f"üìä Total similarities: {stats['count']}")
    print(f"üìà Average similarity: {stats['avg_similarity']:.4f}")
    print(f"üîù Maximum similarity: {stats['max_similarity']:.4f}")
    print(f"üîª Minimum similarity: {stats['min_similarity']:.4f}")
    print()
    print("üìã Component averages:")
    print(f"   Categories: {stats['avg_category']:.4f}")
    print(f"   Keywords:   {stats['avg_keyword']:.4f}")
    print(f"   Authors:    {stats['avg_author']:.4f}")
    print(f"   Description:{stats['avg_description']:.4f}")
    
    # Rozk≈Çad podobie≈Ñstw
    print("\nüìä SIMILARITY DISTRIBUTION:")
    ranges = [
        (0.8, 1.0, "Very High (0.8-1.0)"),
        (0.6, 0.8, "High (0.6-0.8)"),
        (0.4, 0.6, "Medium (0.4-0.6)"),
        (0.2, 0.4, "Low (0.2-0.4)"),
        (0.0, 0.2, "Very Low (0.0-0.2)")
    ]
    
    for min_sim, max_sim, label in ranges:
        count = BookSimilarity.objects.filter(
            cosine_similarity__gte=min_sim,
            cosine_similarity__lt=max_sim
        ).count()
        percentage = (count / stats['count'] * 100) if stats['count'] > 0 else 0
        print(f"   {label:20} {count:6d} ({percentage:5.1f}%)")

def clean_similarities():
    """Wyczy≈õƒá wszystkie podobie≈Ñstwa"""
    print("üßπ CLEANING ALL SIMILARITIES")
    
    response = input("‚ùì Are you sure you want to delete ALL similarities? (y/N): ")
    if response.lower() != 'y':
        print("‚ùå Cancelled")
        return
    
    similarity_count = BookSimilarity.objects.count()
    vector_count = BookVector.objects.count()
    
    with transaction.atomic():
        BookSimilarity.objects.all().delete()
        BookVector.objects.all().delete()
    
    print(f"‚úÖ Deleted {similarity_count} similarities and {vector_count} vectors")

def main():
    """G≈Ç√≥wna funkcja"""
    print("üöÄ BOOK SIMILARITY INITIALIZATION")
    print("=" * 60)
    
    while True:
        print("\nüìã Available options:")
        print("   1. Check prerequisites")
        print("   2. Calculate sample similarities (recommended)")
        print("   3. Calculate ALL similarities (slow!)")
        print("   4. Show similarity examples")
        print("   5. Analyze similarity quality")
        print("   6. Clean all similarities")
        print("   7. Exit")
        
        choice = input("\n‚ùì Choose option (1-7): ").strip()
        
        try:
            if choice == '1':
                check_prerequisites()
            
            elif choice == '2':
                if check_prerequisites():
                    sample_size = input("üìä Sample size (default 50): ").strip()
                    sample_size = int(sample_size) if sample_size else 50
                    calculate_sample_similarities(sample_size)
                    show_similarity_examples()
            
            elif choice == '3':
                if check_prerequisites():
                    calculate_all_similarities()
                    show_similarity_examples()
            
            elif choice == '4':
                show_similarity_examples()
            
            elif choice == '5':
                analyze_similarity_quality()
            
            elif choice == '6':
                clean_similarities()
            
            elif choice == '7':
                print("üëã Goodbye!")
                break
            
            else:
                print("‚ùå Invalid option")
        
        except KeyboardInterrupt:
            print("\nüõë Interrupted by user")
            break
        except Exception as e:
            print(f"üí• Error: {e}")

if __name__ == "__main__":
    main()